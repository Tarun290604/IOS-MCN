#/*
# * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# * contributor license agreements.  See the NOTICE file distributed with
# * this work for additional information regarding copyright ownership.
# * The OpenAirInterface Software Alliance licenses this file to You under
# * the OAI Public License, Version 1.1  (the "License"); you may not use this file
# * except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *      http://www.openairinterface.org/?page_id=698
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# *-------------------------------------------------------------------------------
# * For more information about the OpenAirInterface (OAI) Software Alliance:
# *      contact@openairinterface.org
# */
#---------------------------------------------------------------------
#
# Dockerfile for the Open-Air-Interface BUILD service
#   Valid for Ubuntu 22.04
#
#---------------------------------------------------------------------

    FROM ubuntu:jammy AS ran-base-test
    ARG NEEDED_GIT_PROXY
    ARG TARGETARCH
    ENV DEBIAN_FRONTEND=noninteractive
    ENV TZ=Europe/Paris
    ENV BUILD_UHD_FROM_SOURCE=True
    ENV UHD_VERSION=4.4.0.0
    ENV TINI_VERSION=v0.19.0
    
    # Install base dependencies
    RUN apt-get update && \
        apt-get upgrade --yes && \
        apt-get install --yes \
           build-essential \
           psmisc \
           git \
           gcc-12 \
           g++-12 \
           xxd \
           libpcre2-dev \
           python3-dev \
           bison \
           flex \
           m4 \
           python3-pip \
           wget \
           xz-utils \
           libnuma-dev \
           libnetconf2 \
           meson \
           pkg-config && \
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12 && \
        pip3 install --ignore-installed pyyaml
    
    # Add Tini - Signal handling for containers
    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${TARGETARCH} /tini
    RUN chmod +x /tini
    
    # Configure GIT Proxy if required
    RUN /bin/bash -c "if [[ -v NEEDED_GIT_PROXY ]]; then git config --global http.proxy $NEEDED_GIT_PROXY; fi"
    
    # -----------------------------
    # DPDK Installation
    # -----------------------------
    WORKDIR /dpdk
    RUN wget http://fast.dpdk.org/rel/dpdk-20.11.9.tar.xz && \
        tar xvf dpdk-20.11.9.tar.xz
    
    WORKDIR /dpdk/dpdk-stable-20.11.9
    RUN meson build && \
        ninja -C build && \
        ninja install -C build && \
        echo "/usr/local/lib" > /etc/ld.so.conf.d/local-lib.conf && \
        echo "/usr/local/lib64" >> /etc/ld.so.conf.d/local-lib.conf && \
        ldconfig
    
    # Validate DPDK installation
    RUN pkg-config --libs libdpdk --static
    
    # -----------------------------
    # PHY Integration and Patching
    # -----------------------------
    WORKDIR /phy
    RUN git clone https://gerrit.o-ran-sc.org/r/o-du/phy.git phy
    
    WORKDIR /phy/phy
    RUN git checkout oran_e_maintenance_release_v1.0
    
    # Apply integration patches
    COPY cmake_targets/tools/oran_fhi_integration_patches/E/oaioran_E.patch .
    COPY cmake_targets/tools/oran_fhi_integration_patches/E/iisc_oaioran_E.patch .
    RUN git apply oaioran_E.patch && \
        git apply iisc_oaioran_E.patch
    
    WORKDIR /phy/phy/fhi_lib/lib
    RUN RTE_SDK=/dpdk/dpdk-stable-20.11.9 XRAN_DIR=/phy/phy/fhi_lib make
    
    # -----------------------------
    # RAN Build Environment Setup
    # -----------------------------
    WORKDIR /oai-ran/cmake_targets/tools
    COPY cmake_targets/tools/build_helper \
         cmake_targets/tools/uhd-4.x-tdd-patch.diff \
         ./
    
    WORKDIR /oai-ran/cmake_targets
    COPY cmake_targets/build_oai .
    
    WORKDIR /oai-ran
    COPY oaienv .
    
    # Build OAI RAN with USRP and optional packages
    RUN /bin/sh oaienv && \
        cd cmake_targets && \
        mkdir -p log && \
        ./build_oai -I -w USRP --install-optional-packages        
